#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include<vector>
#include <sstream>
#include <math.h>
#include <chrono>
#include <cstdlib>
using namespace std::chrono;

using namespace std;


// function that swaps two cells on the grid
void swap(int x1, int y1, vector<vector<int> >& sqgrid, int x2, int y2, bool& check1, bool& check2)
{


	int valtmp;

	valtmp = sqgrid[x1][y1];
	sqgrid[x1][y1] = sqgrid[x2][y2];

	sqgrid[x2][y2] = valtmp;

	if (sqgrid[x1][y1] < 0 && sqgrid[x2][y2] >= 0)
	{
		/*cout << "\n sqgrid: " << sqgrid[x2][y2];
		cout << "\n sqgrid1: " << sqgrid[x1][y1];
		cout << "\n x2: " << x2 << "  y2:  " << y2;
		*/
		check1 = false;
		check2 = true;


	}
	else if (sqgrid[x1][y1] >= 0 && sqgrid[x2][y2] < 0) {
		/*cout << "\n sqgrid: " << sqgrid[x2][y2];
		cout << "\n sqgrid1: " << sqgrid[x1][y1];*/
		check1 = true;
		check2 = false;
	}
	else if (sqgrid[x1][y1] >= 0 && sqgrid[x2][y2] >= 0) {



		check1 = true;
		check2 = true;

	}
	else  if (sqgrid[x1][y1] < 0 && sqgrid[x2][y2] < 0) {



		check1 = false;
		check2 = false;

	}



}

//function that prints the grid with the correspondinh total wire length
void print(vector<vector<int> > sqgrid, int hpwl, int x, int y)
{
	cout << "Total wire length = " << hpwl << "\n";
	for (int i = 0; i < x; i++)
	{
		for (int k = 0; k < y; k++)
		{
			if (sqgrid[i][k] == -1) cout << "1";
			
			else cout << "0";
			cout << "\t";
		}
		cout << "\n";
	}

}

// function that calculates hpwl of a single connection
int hpwl(int xmin, int xmax, int ymin, int ymax)
{
	return ((xmax - xmin) + (ymax - ymin));
}


// function that calculates hpwl for all connections of nets
int maxhpwl(vector<vector<int> > cellList, int nets, vector<vector<int> >  xyval,int columns, int rows,  vector<int> &nethpwl)
{
	int maxy = 0, miny = rows, maxx = 0, minx = columns, currhpwl = 0, oldhpwl = 0, sum = 0;
	for (int i = 0; i < nets; i++)
	{
		//cout << "\n \n" << i;
		for (int k = 1; k < cellList[i][0]+1; k++)
		{
	
			if (xyval[cellList[i][k]][1] > maxx) maxx = xyval[cellList[i][k]][1];
			if (xyval[cellList[i][k]][1] < minx) minx = xyval[cellList[i][k]][1];
			if (xyval[cellList[i][k]][2] > maxy) maxy = xyval[cellList[i][k]][2];
			if (xyval[cellList[i][k]][2] < miny) miny = xyval[cellList[i][k]][2];
			//cout << "\n cell list: " << xyval[cellList[i][k]][0];
			//cout << "\n" << "current hpwl" << currhpwl;
		}
		//cout << "\n minx: " << minx << "  maxx: " << maxx << "  miny: " << miny << "  maxy:  " << maxy;
		currhpwl = hpwl(minx, maxx, miny, maxy);
		//cout << "\n hpwl: " << currhpwl;
		nethpwl.push_back(currhpwl);
		if (oldhpwl < currhpwl) oldhpwl = currhpwl;
		sum = sum + currhpwl;
	}
	/*cout << "\n nethpwl : ";
	for (int i = 0; i < nethpwl.size(); i++)
	{
		cout << "\n " << nethpwl[i];
	}
	cout << "\n max size: " << nethpwl.size();*/
	return sum;
}


int updatehpwl(vector<vector<int> > sqgrid, vector<vector<int> > cellList, vector<vector<int> >  valxy, int x1, int y1, int x2, int y2, int columns, int rows, bool check1, bool check2, vector<int> &nethpwl)
{
	int maxy = 0, miny = rows, maxx = 0, minx = columns, currhpwl = 0, oldhpwl = 0, sum = 0;

	int size = 0;
	//cout << "\n check1: " << check1 << "  check2: " << check2;
	if (check1 == true && check2 == false)
	{
		int net = 0;
		
		for (int i = 3; i < valxy[sqgrid[x1][y1]].size(); i++)
		{
			
			net = valxy[sqgrid[x1][y1]][i];
			//cout << "\n net: " << net;
			//cout << "\n size: " <<cellList.size();
			for (int k = 1; k < cellList[net][0]  + 1; k++)
			{
				size++;
				if (valxy[cellList[net][k]][1] > maxx) maxx = valxy[cellList[net][k]][1];
				if (valxy[cellList[net][k]][1] < minx) minx = valxy[cellList[net][k]][1];
				if (valxy[cellList[net][k]][2] > maxy) maxy = valxy[cellList[net][k]][2];
				if (valxy[cellList[net][k]][2] < miny) miny = valxy[cellList[net][k]][2];
			
				//cout << "\n" << "current hpwl" << currhpwl;
			}
			currhpwl = hpwl(minx, maxx, miny, maxy);
			nethpwl[net] = currhpwl;
			if (oldhpwl < currhpwl) oldhpwl = currhpwl;
			sum = sum + currhpwl;
		}


	}

	else  if (check2 == true && check1 == false)
	{
		//cout << "\n x2: " << x2 << "  y2:  " << y2;
		//cout << "\n sqgrid size: "<<sqgrid[x2][y2];
		//cout << "\n valxy size: " << valxy.size();
		 //cout << " \n error heressss";
		 //int y = valxy[sqgrid[x2][y2]].size();
		 
		
		int net;
		for (int i = 3; i < valxy[sqgrid[x2][y2]].size(); i++)
		{
			
			net = valxy[sqgrid[x2][y2]][i];
			//cout << " \n error heressss";
			//cout << "\n net: " << net;
			//cout << "\n size: " << cellList.size();
			for (int k = 1; k < cellList[net][0]  + 1; k++)
			{
				size++;
			
				if (valxy[cellList[net][k]][1] > maxx) maxx = valxy[cellList[net][k]][1];
				if (valxy[cellList[net][k]][1] < minx) minx = valxy[cellList[net][k]][1];
				if (valxy[cellList[net][k]][2] > maxy) maxy = valxy[cellList[net][k]][2];
				if (valxy[cellList[net][k]][2] < miny) miny = valxy[cellList[net][k]][2];
			
				//cout << "\n" << "current hpwl" << currhpwl;
			}
				currhpwl = hpwl(minx, maxx, miny, maxy);
				nethpwl[net] = currhpwl;
		if (oldhpwl < currhpwl) oldhpwl = currhpwl;
		sum = sum + currhpwl;
		}

	}
	else if (check2 == true && check1 == true)
	{
		
		for (int i = 3; i < valxy[sqgrid[x1][y1]].size(); i++)
		{
			int net = valxy[sqgrid[x1][y1]][i];
	
			net = valxy[sqgrid[x1][y1]][i];
			//cout << "\n net: " << net;
			//cout << "\n size: " << cellList.size();
	
			for (int k = 1; k < cellList[net][0] + 1; k++)
			{
				size++;
				
				if (valxy[cellList[net][k]][1] > maxx) maxx = valxy[cellList[net][k]][1];
				if (valxy[cellList[net][k]][1] < minx) minx = valxy[cellList[net][k]][1];
				if (valxy[cellList[net][k]][2] > maxy) maxy = valxy[cellList[net][k]][2];
				if (valxy[cellList[net][k]][2] < miny) miny = valxy[cellList[net][k]][2];
				
				//cout << "\n" << "current hpwl" << currhpwl;
			}
			currhpwl = hpwl(minx, maxx, miny, maxy);
			nethpwl[net] = currhpwl;
			if (oldhpwl < currhpwl) oldhpwl = currhpwl;
			sum = sum + currhpwl;
		}
		for (int i = 3; i < valxy[sqgrid[x2][y2]].size(); i++)
		{
			
			int net = valxy[sqgrid[x2][y2]][i];
			//cout << "\n net: " << net;
			//cout << "\n size: " << cellList.size();
			for (int k = 1; k < cellList[net][0] + 1; k++)
			{
				size++;
				if (valxy[cellList[net][k]][1] > maxx) maxx = valxy[cellList[net][k]][1];
				if (valxy[cellList[net][k]][1] < minx) minx = valxy[cellList[net][k]][1];
				if (valxy[cellList[net][k]][2] > maxy) maxy = valxy[cellList[net][k]][2];
				if (valxy[cellList[net][k]][2] < miny) miny = valxy[cellList[net][k]][2];
			
				//cout << "\n" << "current hpwl" << currhpwl;
			}
			currhpwl = hpwl(minx, maxx, miny, maxy);
			nethpwl[net] = currhpwl;
			if (oldhpwl < currhpwl) oldhpwl = currhpwl;
			sum = sum + currhpwl;
		}

	}
	else{
		sum = 0;

	}
/*
	cout << "\n nethpwl : ";
	for (int i = 0; i < nethpwl.size(); i++)
	{
		cout << "\n " << nethpwl[i];
	}*/
	//cout << "\n max size: " << nethpwl.size();
	//cout << "\n size: " << size;
	return sum;
}


//function that updates the 2d vector that stores the value of each cell and its x and y value on the grid after swapping
void updatexyval(vector<vector<int> > &valxy, vector<vector<int> > &sqgrid, int x1, int y1, int x2, int y2)
{


	if (sqgrid[x1][y1] < 0)
	{
		
		if (sqgrid[x2][y2] < 0)
		{
			
		}
		else {
			valxy[sqgrid[x2][y2]][0] = sqgrid[x2][y2];
			valxy[sqgrid[x2][y2]][1] = x2;
			valxy[sqgrid[x2][y2]][2] = y2;
			

		}
	}
	else {
		if (sqgrid[x2][y2] < 0)
		{
			valxy[sqgrid[x1][y1]][0] = sqgrid[x1][y1];
			valxy[sqgrid[x1][y1]][1] = x1;
			valxy[sqgrid[x1][y1]][2] = y1;
			

		}
		else {
			valxy[sqgrid[x2][y2]][0] = sqgrid[x2][y2];
			valxy[sqgrid[x2][y2]][1] = x2;
			valxy[sqgrid[x2][y2]][2] = y2;

			valxy[sqgrid[x1][y1]][0] = sqgrid[x1][y1];
			valxy[sqgrid[x1][y1]][1] = x1;
			valxy[sqgrid[x1][y1]][2] = y1;
			
		}


	}
				

				



}



void outfile(vector<float> temps, vector<int> wirelength)
{
	ofstream graphs,graphs2;
	graphs.open("t195.csv");
	graphs2.open("t1cooling95.csv");
	if (graphs.is_open() == false || graphs2.is_open() == false) cout << "could not open file";
	for (int i = 0; i < temps.size(); i++)
	{
		graphs << temps[i];
		graphs << ", ";

	}
	graphs << "\n";
	for (int i = 0; i < wirelength.size(); i++)
	{
		graphs << wirelength[i];
		graphs << ", ";
		graphs2 << wirelength[i];
		graphs2 << ", ";
	}


}
int main()
{
	//auto start = high_resolution_clock::now();
	




	// parcing input file
	ifstream netlist;
	vector<vector<int> > cellList;
	vector<vector<int> > sqgrid;

	int cells, connections, rows, columns;
	netlist.open("test.txt");

	netlist >> cells;
	netlist >> connections;
	netlist >> rows;
	netlist >> columns;
	//cout << cells << "\t" << connections << "\t" << rows << "\t" << columns << "\n";
	int numberofcon;
	vector<vector<int> > valxy;
	valxy.resize(cells);
	for (int i = 0; i < cells; i++)
	{
		valxy[i].resize(3);
		valxy[i][0] = i;
		
	}

	cellList.resize(connections);
	int singlexy;
	for (int i = 0; i < connections; i++)
		cellList[i].resize(cells + 1);

	//cout << "\n" << cellList.size();
	for (int i = 0; i < connections; i++)
	{
		
		//getline(netList,test);
		netlist >> numberofcon;


		//cout << "\n" << numberofcon;


		//cout << "\n" << cellList[i].size();
		for (int j = 1; j < numberofcon + 1; j++)
		{
			cellList[i][0] = numberofcon;
			netlist >> cellList[i][j];
			singlexy = i;
			valxy[cellList[i][j]].push_back(i) ;

		}

	}



	netlist.close();

	// parcing ends

	//printing input file
	/*for (int i = 0; i < connections; i++)
	{
		for (int j = 0; j < cells; j++)
		{
			if (cellList[i][j] == 0)
			{
			}
			else {
				cout << cellList[i][j] << "\t";
			}


		}
		cout << "\n";
	}*/
	//cout << "\n"<<cellList[0][0] << cellList[1][0] << cellList[2][0];


	// initial placement of cells and instantiating the 2d vector xyval the stores each cell with its corresponding x and y value on the grid

	int xmin = rows, ymin = columns;
	int xmax = 0, ymax = 0;
	bool rejected = false;
	vector<float> temps;
	vector<int> wirelength;
	//Declaring a 2D-vector of size: x * y
	sqgrid.resize(rows);

	for (int i = 0; i < rows; i++)
		sqgrid[i].resize(columns);

	//Filling the 2D-vector with empty cells
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < columns; j++)
		{
			sqgrid[i][j] = -1;
		}
	}
	
	
	//Initial Placement
	srand((unsigned)(NULL));
	for (int i = 0; i < cells + 1; i++)
	{
		if (rejected == false && i == cells) break;
		if (rejected)
			i--;

		int rn1 = (rand() % rows);
		int rn2 = (rand() % columns);

		if (sqgrid[rn1][rn2] == -1)
		{
			sqgrid[rn1][rn2] = i;
			
			valxy[i][1] = rn1;
			valxy[i][2] = rn2;


			rejected = false;
		}
		else
			rejected = true;
	}

	// Get ending timepoint
	
	// Calculating the hpwl of all nets using simple annealing 
	vector<int> nethpwl1, nethpwl2, nethpwl3;
	int initialcost;
	initialcost = maxhpwl(cellList, connections, valxy, columns, rows, nethpwl1);
	nethpwl2 = nethpwl1;

	//cout << "\n size: " << nethpwl1.size();
	nethpwl3 = nethpwl1;
	
	print(sqgrid, initialcost, rows, columns);

	double cost, bestcost, oldcost, gain;
	double initialtemp, currtemp, ftemp, moveptemp;
	
	/*for (int i = 0; i < cells; i++)
	{
		for (int j = 3; j < valxy[i].size(); j++)
		{
			cout << valxy[i][j]<<" ";
		}
		cout << "\n";
	}*/
	

	cost = initialcost;
	//Initial Placement
	initialtemp = 500 * cost;
	currtemp = initialtemp;
	bestcost = cost;
	int costdif1, costdif2, gaindif;
	ftemp = 0.000005 * (cost / connections);
	int sum1 = 0;
	while (currtemp > ftemp)
	{
		wirelength.push_back(cost);
		temps.push_back(currtemp);
		srand((unsigned)(NULL));
		for (int i = 0; i < 1 *cells; i++)
		{
			//cout << "\n hpwl vect: " << nethpwl2[0];

			oldcost = cost;
			
			bool check1, check2;
		
			int rn1 = (rand() % rows);
			int rn2 = (rand() % columns);
			int rn3 = (rand() % rows);
			int rn4 = (rand() % columns);

			//cout << "\n" << rn1 << "\t" << rn2 << "\t" << rn3 << "\t" << rn4 << "\n";
			//cout << "\n sqgrid1: " << sqgrid[rn1][rn2] << "   sqgrid2: " << sqgrid[rn3][rn4] << " \n";
			
			swap(rn1, rn2, sqgrid, rn3, rn4, check1, check2);
			
			//print(sqgrid, 0, columns, rows);
			//cout << "done ";
			if (check1 == false && check2 == false)
			{
				

			}
			else {

				updatexyval(valxy, sqgrid, rn1, rn2, rn3, rn4);
				//cout << "\n net3: ";
				//auto start = high_resolution_clock::now();
				costdif2 = updatehpwl(sqgrid, cellList, valxy, rn3, rn4, rn1, rn2, columns, rows, check2, check1, nethpwl3);
				//auto stop = high_resolution_clock::now();

				// Get duration. Substart timepoints to
				// get duration. To cast it to proper unit
				// use duration cast method
				/*auto duration = duration_cast<microseconds>(stop - start);

				cout << "Time taken by function: "
					<< duration.count() << " microseconds" << endl;*/
				int  sum2 = 0;
				
				for (int i = 0; i < nethpwl2.size(); i++)
				{
					//sum1 = sum1 + nethpwl2[i];
					sum2 = sum2 + nethpwl3[i];
				}

				
				//cost = maxhpwl(cellList, connections, valxy, columns, rows);
				gaindif = sum1 - sum2;
				//cout << "\n sum1: " << sum1 << "  sum2: " << sum2;
									//cout << "\n gain dif: " << gaindif;
				//cout << "\n hpwl1 : " << costdif1<< "  hpwl2 : " << costdif2<<"\n";
				//cost = cost + costdif2 - costdif1;


				//print(sqgrid, cost, rows, columns);
				//cout << "\n" << cost;
				//cost = hpwl(xmin, xmax, ymin, ymax);
				gain = oldcost - cost;
				//cost = cost - costdif2;
				//cout << "\n gain: " << gain;
				//srand((unsigned)time(0));
				if (sum2 > sum1)
				{

					float r = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
					//float prob = (rand() % 1);
					//cout <<"\n r: "<< r;
					double g = gaindif / currtemp;
					//cout << "\n gain: " << gaindif;
					//cout << "\n g: " << g;
					double ex = exp(g);
					//cout << "prob: " << 1-ex << "\n";
					if (r >= ex) {
						swap(rn1, rn2, sqgrid, rn3, rn4, check1, check2);
						updatexyval(valxy, sqgrid, rn1, rn2, rn3, rn4);
						cost = sum1;
						//cout << "rejected";
					}
					else {
						//cout << " \n accepted";
						cost = sum2 ;
						nethpwl2 = nethpwl3;
						sum1 = sum2;

					}

				}
				else {
					cost = sum2;
					nethpwl2 = nethpwl3;
					sum1 = sum2;
				}
				
				//updatexyval(valxy, sqgrid, rn1, rn2, rn3, rn4);
				//cout << "\n cost: " << cost;
			}
		}
		
		currtemp = currtemp * 0.95;
		//cout << "Currtemp " << currtemp << "    ftemp" << ftemp << "\n \n \n";
	}

	// printing grid after finishing the algorithm

	print(sqgrid, cost, rows, columns);
	//outfile(temps, wirelength);
	/*auto stop = high_resolution_clock::now();

	auto duration = duration_cast<microseconds>(stop - start);


	cout << "Time taken by function: "
		<< duration.count() << " microseconds" << endl;*/
	return 0;
}
